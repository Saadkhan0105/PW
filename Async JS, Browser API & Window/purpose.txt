Purpose of localStorage and sessionStorage APIs
Both localStorage and sessionStorage are part of the Web Storage API, designed to provide a way to store key-value pairs in the browser. They are used to store data on the client side, offering an alternative to cookies with more straightforward APIs and better performance.

Common Features
Key-Value Storage: Both APIs store data as key-value pairs.
String-Only Storage: Values are stored as strings. Other data types need to be serialized (e.g., using JSON.stringify()).
Size Limit: They offer a larger storage capacity compared to cookies, typically around 5-10 MB.
Same-Origin Policy: Data stored is only accessible within the same origin (protocol, host, and port).
Differences
localStorage
Persistence: Data persists even after the browser is closed and reopened. It is retained indefinitely until explicitly deleted.
Scope: Available across all tabs and windows from the same origin.
sessionStorage
Persistence: Data is only available for the duration of the page session. It is cleared when the page session ends (i.e., when the tab or window is closed).
Scope: Only available within the tab or window that created it. Different tabs/windows do not share the same sessionStorage data, even if they are from the same origin.
Usage Examples
localStorage Example
Purpose: Storing user preferences or settings that need to persist across sessions.

Example: Saving a user's theme preference (light or dark mode).

javascript

// Save theme preference to localStorage
function saveThemePreference(theme) {
    localStorage.setItem('theme', theme);
}

// Retrieve theme preference from localStorage
function getThemePreference() {
    return localStorage.getItem('theme') || 'light'; // Default to 'light' if no preference is set
}

// Apply theme preference
function applyTheme(theme) {
    document.body.className = theme;
}

// Example usage
document.getElementById('themeSelector').addEventListener('change', (event) => {
    const selectedTheme = event.target.value;
    saveThemePreference(selectedTheme);
    applyTheme(selectedTheme);
});

// On page load, apply the stored theme preference
document.addEventListener('DOMContentLoaded', () => {
    const savedTheme = getThemePreference();
    applyTheme(savedTheme);
});
sessionStorage Example
Purpose: Storing temporary data that only needs to be available for the duration of a page session.

Example: Storing form input data temporarily to avoid loss if the page is accidentally refreshed.

javascript

// Save form data to sessionStorage
function saveFormData() {
    const formData = {
        name: document.getElementById('name').value,
        email: document.getElementById('email').value
    };
    sessionStorage.setItem('formData', JSON.stringify(formData));
}

// Retrieve form data from sessionStorage
function getFormData() {
    const formData = sessionStorage.getItem('formData');
    return formData ? JSON.parse(formData) : null;
}

// Populate form with saved data
function populateForm() {
    const savedData = getFormData();
    if (savedData) {
        document.getElementById('name').value = savedData.name;
        document.getElementById('email').value = savedData.email;
    }
}

// Example usage
document.getElementById('name').addEventListener('input', saveFormData);
document.getElementById('email').addEventListener('input', saveFormData);

// On page load, populate the form with the stored data
document.addEventListener('DOMContentLoaded', populateForm);
Summary
localStorage is ideal for data that needs to persist across browser sessions, such as user settings and preferences.
sessionStorage is suitable for data that only needs to be available during the current session, such as form data that shouldn't be lost on page refresh.
Both APIs provide a simple and efficient way to store and retrieve data on the client side, improving the user experience by maintaining state and reducing the need for repeated server requests.





