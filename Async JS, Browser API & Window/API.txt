JavaScript provides a wide range of Browser APIs that enable developers to interact with the browser and manipulate web pages. Here are some common Browser APIs available to JavaScript developers:

1. Document Object Model (DOM) API
Description: Provides methods and properties to interact with and manipulate the HTML and CSS of a web page.
Examples:
document.getElementById('id'): Selects an element by its ID.
element.textContent: Sets or gets the text content of an element.
element.style: Manipulates the inline styles of an element.
2. Fetch API
Description: Allows for making network requests to retrieve resources. It's a modern replacement for XMLHttpRequest.
Example:
javascript

fetch('https://api.example.com/data')
  .then(response => response.json())
  .then(data => console.log(data))
  .catch(error => console.error('Error:', error));
3. Console API
Description: Provides methods for logging information to the browser's console, useful for debugging.
Examples:
console.log('Message'): Logs a message.
console.error('Error message'): Logs an error message.
console.table(array): Displays data in a table format.
4. LocalStorage and SessionStorage APIs
Description: Allows for storing data on the client side in key-value pairs. localStorage persists data indefinitely, while sessionStorage persists data for the duration of the page session.
Examples:
javascript

localStorage.setItem('key', 'value');
let value = localStorage.getItem('key');
sessionStorage.setItem('key', 'value');
let sessionValue = sessionStorage.getItem('key');
5. Geolocation API
Description: Provides access to the user's geographical location, with their consent.
Example:
javascript

navigator.geolocation.getCurrentPosition((position) => {
  console.log('Latitude:', position.coords.latitude);
  console.log('Longitude:', position.coords.longitude);
});
6. Canvas API
Description: Enables drawing graphics via scripting (usually JavaScript) on a web page.
Example:
javascript

let canvas = document.getElementById('myCanvas');
let ctx = canvas.getContext('2d');
ctx.fillStyle = 'green';
ctx.fillRect(10, 10, 150, 100);
7. History API
Description: Provides methods to interact with the browser's history, allowing for navigation and manipulation of the history stack.
Examples:
history.pushState(state, title, url): Adds a new entry to the history stack.
history.back(): Moves back one entry in the history.
history.forward(): Moves forward one entry in the history.
8. Web Storage API
Description: Consists of localStorage and sessionStorage, allowing for storing data in the browser.
Example:
javascript

localStorage.setItem('username', 'JohnDoe');
let username = localStorage.getItem('username');
9. Service Workers API
Description: Enables background scripts that run independently of web pages, useful for features like offline support and background sync.
Example:
javascript

if ('serviceWorker' in navigator) {
  navigator.serviceWorker.register('/sw.js')
    .then(registration => console.log('Service Worker registered with scope:', registration.scope))
    .catch(error => console.log('Service Worker registration failed:', error));
}
10. Notification API
Description: Allows web pages to send notifications to the user.
Example:
javascript

if (Notification.permission === 'granted') {
  new Notification('Hello, World!');
} else if (Notification.permission !== 'denied') {
  Notification.requestPermission().then(permission => {
    if (permission === 'granted') {
      new Notification('Hello, World!');
    }
  });
}
11. Clipboard API
Description: Provides methods to copy and paste text programmatically.
Example:
javascript

navigator.clipboard.writeText('Text to copy')
  .then(() => console.log('Text copied to clipboard'))
  .catch(err => console.error('Failed to copy text:', err));
12. Drag and Drop API
Description: Enables the handling of drag-and-drop interactions.
Example:
html

<div draggable="true" ondragstart="drag(event)" id="drag1">Drag me</div>
<div ondrop="drop(event)" ondragover="allowDrop(event)" id="dropZone">Drop here</div>
<script>
  function allowDrop(event) {
    event.preventDefault();
  }
  function drag(event) {
    event.dataTransfer.setData("text", event.target.id);
  }
  function drop(event) {
    event.preventDefault();
    let data = event.dataTransfer.getData("text");
    event.target.appendChild(document.getElementById(data));
  }
</script>
These APIs are just a subset of the many available to JavaScript developers, enabling powerful interactions and functionality within web applications.
